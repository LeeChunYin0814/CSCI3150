#include "rwlock.h"
#include <stdio.h>
#include <string.h>

/*
    This is the ONLY file you need to implement.
*/

void rwlock_init(rwlock_t *rwlock) {
    // TODO
    pthread_mutex_init(&rwlock->lock, NULL);
    pthread_cond_init(&rwlock->readers_cond, NULL);
    pthread_cond_init(&rwlock->writers_cond, NULL);
    rwlock->active_readers = 0;
    rwlock->active_writers = 0;
    rwlock->waiting_high_priority_readers = 0;
    rwlock->waiting_high_priority_writers = 0;
    rwlock->waiting_low_priority_readers = 0;
    rwlock->waiting_low_priority_writers = 0;
}

void rwlock_acquire_read(rwlock_t *rwlock, const char *priority) {
    // TODO
    // priority is either "high priority" or "low priority"
    pthread_mutex_lock(&rwlock->lock);

    if (strcmp(priority, "high priority") == 0) {
        rwlock->waiting_high_priority_readers++;

        // Wait while there are active writers or low-priority writers
        while (rwlock->active_writers > 0 || rwlock->waiting_low_priority_writers > 0) {
            pthread_cond_wait(&rwlock->readers_cond, &rwlock->lock);
        }

        rwlock->waiting_high_priority_readers--;
    } else { // low priority
        rwlock->waiting_low_priority_readers++;

        // Wait while there are active writers
        while (rwlock->active_writers > 0) {
            pthread_cond_wait(&rwlock->readers_cond, &rwlock->lock);
        }

        rwlock->waiting_low_priority_readers--;
    }

    rwlock->active_readers++;
    pthread_mutex_unlock(&rwlock->lock);
}

void rwlock_release_read(rwlock_t *rwlock) {
    // TODO
    pthread_mutex_lock(&rwlock->lock);

    rwlock->active_readers--;
    if (rwlock->active_readers == 0) {
        // If no active readers, signal waiting writers
        pthread_cond_signal(&rwlock->writers_cond);
    }

    pthread_mutex_unlock(&rwlock->lock);
}

void rwlock_acquire_write(rwlock_t *rwlock, const char *priority) {
    // TODO
    // priority is either "high priority" or "low priority"
    pthread_mutex_lock(&rwlock->lock);

    if (strcmp(priority, "high priority") == 0) {
        rwlock->waiting_high_priority_writers++;

        // Wait while there are active readers or writers
        while (rwlock->active_readers > 0 || rwlock->active_writers > 0) {
            pthread_cond_wait(&rwlock->writers_cond, &rwlock->lock);
        }

        rwlock->waiting_high_priority_writers--;
    } else { // low priority
        rwlock->waiting_low_priority_writers++;

        // Wait while there are active readers or writers
        while (rwlock->active_readers > 0 || rwlock->active_writers > 0) {
            pthread_cond_wait(&rwlock->writers_cond, &rwlock->lock);
        }

        rwlock->waiting_low_priority_writers--;
    }

    rwlock->active_writers++;
    pthread_mutex_unlock(&rwlock->lock);
}

void rwlock_release_write(rwlock_t *rwlock) {
    // TODO
    pthread_mutex_lock(&rwlock->lock);

    rwlock->active_writers--;
    // Signal waiting readers and writers
    pthread_cond_broadcast(&rwlock->readers_cond);
    pthread_cond_signal(&rwlock->writers_cond);

    pthread_mutex_unlock(&rwlock->lock);
}
